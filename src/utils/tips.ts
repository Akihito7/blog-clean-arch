export default [
  {
    title: "Evite commits grandes",
    content: "Commits pequenos e frequentes ajudam no rastreio de mudanças e facilitam revisões.",
    link: "https://www.atlassian.com/git/tutorials/saving-changes",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Nomeie suas variáveis com clareza",
    content: "Prefira nomes descritivos ao invés de abreviações que só você entende.",
    link: "https://www.clean-code.dev/",
    current: true,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Evite lógica no controller",
    content: "Deixe a lógica de negócio nos casos de uso. Controllers devem apenas orquestrar.",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Use enums no lugar de strings soltas",
    content: "Enums evitam erros de digitação e facilitam refatorações em larga escala.",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Trate erros de forma consistente",
    content: "Padronize exceções e respostas de erro. Facilita debugging e melhora a UX.",
    link: "https://martinfowler.com/articles/error-handling.html",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Evite acoplamento direto ao ORM",
    content: "Crie interfaces de repositório para manter a aplicação desacoplada da infraestrutura.",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Valide os dados na borda do sistema",
    content: "Use validadores nos DTOs para evitar que dados inválidos entrem na aplicação.",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Use `readonly` onde possível",
    content: "Marcar propriedades e parâmetros como `readonly` ajuda a garantir imutabilidade e evita bugs.",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Separe camadas por responsabilidade",
    content: "Use uma arquitetura como Clean Architecture para manter o código escalável e testável.",
    link: "https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Evite duplicação de código",
    content: "Se notar um padrão se repetindo, extraia para uma função reutilizável ou classe.",
    current: false,
    used: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

